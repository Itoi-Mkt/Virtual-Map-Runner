<!doctype html>
<html lang="ja">
<head>
	<%= csrf_meta_tags %>
	<title>chizu-aruko.com</title>


	<!-- 「stylesheet.css」を読み込む -->
	<%= stylesheet_link_tag    "map", media: "all" %>




	<style type="text/css">
		v\:* {behavior:url(#default#VML);}
		html, body {width: 100%; height: 100%}
		body {margin-top: 0px; margin-right: 0px; margin-left: 0px; margin-bottom: 0px}
	</style>







	<script src="https://apis.google.com/js/client.js"></script>

	<div id="gmap" class="gmap" style="width: 100%; height: 100%;"></div>

	<script src="https://www.gstatic.com/external_hosted/jquery2.min.js"></script>

	<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['API_KEY']%>&callback=initMap" async defer></script>

</head>
<body>

	<meta charset="UTF-8">

	<div class="mappanel-wrapper">
		<div class="container">
			<div class="heading">
				<h2>Mappanel</h2>
			</div>
			<div class="mappanels">


			
			
				<div class="mappanel">
					<div class="mappanel-icon" id="zoom_in">
						<img src="https://prog-8.com/images/html/advanced/html.png">
						<p>拡大</p>
					</div>
					<p class="panel-contents"></p>
				</div>


				<div class="mappanel">
					<div class="mappanel-icon" id="zoom_out">
						<img src="https://prog-8.com/images/html/advanced/html.png">
						<p>縮小</p>
					</div>
					<p class="panel-contents"></p>
				</div>


				<div class="mappanel">
					<div class="mappanel-icon">
						<img src="https://prog-8.com/images/html/advanced/html.png">
						<p>ルート</p>
					</div>
					<p class="panel-contents"></p>
				</div>


				<div class="mappanel">					
					<a href="http://localhost:3000/user">
					<%# <a href="https://chizu-aruko.com/user"> %>
						<div class="mappanel-icon">
							<img src="https://prog-8.com/images/html/advanced/html.png">
							<p>ユーザーページへ</p>
						</div>
						<p class="panel-contents"></p>
					</a>
				</div>

				<div class="mappanel">
					<div class="mappanel-icon">
						<img src="https://prog-8.com/images/html/advanced/html.png">
						<p>閉じる</p>
					</div>
					<p class="panel-contents"></p>
				</div>				
			
			</div>
		</div>
	</div>


	<script>

		//initMap
		function initMap() { 



			// 地図を生成して表示
			var map = new google.maps.Map(document.getElementById("gmap"), {
				mapId: "67ef94185bd51ea8",
				zoom: 7,
				center: new google.maps.LatLng(43.6850804,142.7975314),  //Madison Av/E 38 St
				mapTypeId: "roadmap",
				mapTypeControl: false,
				zoomControl: false,
				fullscreenControl: false,
				rotateControl: false,
				scaleControl: false,
				streetViewControl: false
			});
			imap = map

			// var ingressButtonDiv = document.createElement("div");
			// var ingressButton = new ingressControl(ingressButtonDiv, map);
				
			// ingressButtonDiv.index = 1;
			// map.controls[google.maps.ControlPosition.TOP_RIGHT].push(ingressButtonDiv);

		}


		document.getElementById("zoom_in").onclick = function() {
			var buttonUI = document.getElementById("zoom_in");
			var zoom = imap.getZoom();
			console.log(zoom); 
			imap.setZoom(zoom + 1);
		}


		document.getElementById("zoom_out").onclick = function() {
			var buttonUI = document.getElementById("zoom_out");
			var zoom = imap.getZoom();
			console.log(zoom); 
			imap.setZoom(zoom - 1);
		}


		// zoom_inボタン
		// function ingressControl(buttonDiv, map) {
		// 	var buttonUI = document.createElement("div");

		// 	buttonUI.style.backgroundColor = "rgb(0, 79, 74)";
		// 	buttonUI.style.border = "1px solid #59fbea";
		// 	buttonUI.style.boxShadow = "rgba(0, 0, 0, 0.3) 0px 1px 4px -1px";
		// 	buttonUI.style.cursor = "pointer";
		// 	buttonUI.style.padding = "1px 6px";
				
		// 	buttonUI.style.color = "#59fbea";
		// 	buttonUI.style.fontFamily = "Coda, Arial,sans-serif";
		// 	buttonUI.style.fontSize = "15px";
		// 	buttonUI.style.textAlign = "center";
			
		// 	buttonUI.title = "zoom_in";
		// 	buttonUI.innerHTML = "zoom_in";

		// 	buttonDiv.style.padding = "5px";
		// 	buttonDiv.appendChild(buttonUI);
				
		// 	google.maps.event.addDomListener(buttonUI, "click", function() {
		// 		var zoom = imap.getZoom();
		// 		imap.setZoom(zoom + 1);
		// 	});
		// }

		// // zoom_outボタン
		// function ingressControl(buttonDiv, map) {
		// 	var buttonUI = document.createElement("div");

		// 	buttonUI.style.backgroundColor = "rgb(0, 79, 74)";
		// 	buttonUI.style.border = "1px solid #59fbea";
		// 	buttonUI.style.boxShadow = "rgba(0, 0, 0, 0.3) 0px 1px 4px -1px";
		// 	buttonUI.style.cursor = "pointer";
		// 	buttonUI.style.padding = "1px 6px";
				
		// 	buttonUI.style.color = "#59fbea";
		// 	buttonUI.style.fontFamily = "Coda, Arial,sans-serif";
		// 	buttonUI.style.fontSize = "15px";
		// 	buttonUI.style.textAlign = "center";
			
		// 	buttonUI.title = "zoom_out";
		// 	buttonUI.innerHTML = "zoom_out";

		// 	buttonDiv.style.padding = "5px";
		// 	buttonDiv.appendChild(buttonUI);
				
		// 	google.maps.event.addDomListener(buttonUI, "click", function() {
		// 		var zoom = imap.getZoom();
		// 		imap.setZoom(zoom - 1);
		// 	});
		// }

		// // route_windowボタン
		// function ingressControl(buttonDiv, map) {
		// 	var buttonUI = document.createElement("div");

		// 	buttonUI.style.backgroundColor = "rgb(0, 79, 74)";
		// 	buttonUI.style.border = "1px solid #59fbea";
		// 	buttonUI.style.boxShadow = "rgba(0, 0, 0, 0.3) 0px 1px 4px -1px";
		// 	buttonUI.style.cursor = "pointer";
		// 	buttonUI.style.padding = "1px 6px";
				
		// 	buttonUI.style.color = "#59fbea";
		// 	buttonUI.style.fontFamily = "Coda, Arial,sans-serif";
		// 	buttonUI.style.fontSize = "15px";
		// 	buttonUI.style.textAlign = "center";
			
		// 	buttonUI.title = "route_window";
		// 	buttonUI.innerHTML = "route_window";

		// 	buttonDiv.style.padding = "5px";
		// 	buttonDiv.appendChild(buttonUI);
				
		// 	google.maps.event.addDomListener(buttonUI, "click", function() {
		// 		var center = map.getCenter();
		// 		var zoom = imap.getZoom();
		// 		imap.setZoom(zoom);
		// 		window.location.href="https://www.~~~=" + center.lat() + "," + center.lng() + "&z=" + zoom;
		// 	});
		// }

		// // user_windowボタン
		// function ingressControl(buttonDiv, map) {
		// 	var buttonUI = document.createElement("div");

		// 	buttonUI.style.backgroundColor = "rgb(0, 79, 74)";
		// 	buttonUI.style.border = "1px solid #59fbea";
		// 	buttonUI.style.boxShadow = "rgba(0, 0, 0, 0.3) 0px 1px 4px -1px";
		// 	buttonUI.style.cursor = "pointer";
		// 	buttonUI.style.padding = "1px 6px";
				
		// 	buttonUI.style.color = "#59fbea";
		// 	buttonUI.style.fontFamily = "Coda, Arial,sans-serif";
		// 	buttonUI.style.fontSize = "15px";
		// 	buttonUI.style.textAlign = "center";
			
		// 	buttonUI.title = "Dive into Ingress";
		// 	buttonUI.innerHTML = "Dive into Ingress";

		// 	buttonDiv.style.padding = "5px";
		// 	buttonDiv.appendChild(buttonUI);
				
		// 	google.maps.event.addDomListener(buttonUI, "click", function() {
		// 		var center = map.getCenter();
		// 		var zoom = imap.getZoom();
		// 		imap.setZoom(zoom + 1);
		// 		window.location.href="https://www.~~~=" + center.lat() + "," + center.lng() + "&z=" + zoom;
		// 	});
		// }

		// // close_windowボタン
		// function ingressControl(buttonDiv, map) {
		// 	var buttonUI = document.createElement("div");

		// 	buttonUI.style.backgroundColor = "rgb(0, 79, 74)";
		// 	buttonUI.style.border = "1px solid #59fbea";
		// 	buttonUI.style.boxShadow = "rgba(0, 0, 0, 0.3) 0px 1px 4px -1px";
		// 	buttonUI.style.cursor = "pointer";
		// 	buttonUI.style.padding = "1px 6px";
				
		// 	buttonUI.style.color = "#59fbea";
		// 	buttonUI.style.fontFamily = "Coda, Arial,sans-serif";
		// 	buttonUI.style.fontSize = "15px";
		// 	buttonUI.style.textAlign = "center";
			
		// 	buttonUI.title = "close_window";
		// 	buttonUI.innerHTML = "close_window";

		// 	buttonDiv.style.padding = "5px";
		// 	buttonDiv.appendChild(buttonUI);
				
		// 	google.maps.event.addDomListener(buttonUI, "click", function() {
		// 		// window.close;
		// 	});
		// }
	</script> 



	<script>
		const client_id = '<%= ENV['APLI_CLIANT_ID']%>'
		const scope = ['https://www.googleapis.com/auth/fitness.location.read']
		let total = 0
		let root_dis = 0
		var imap




		// DBにPOSTするfetch用にCsrfTokenを取る
		const getCsrfToken = () => {
			const metas = document.getElementsByTagName('meta');
			for (let meta of metas) {
				if (meta.getAttribute('name') === 'csrf-token') {
					return meta.getAttribute('content');
				}
			}
			return '';
		}

		// authを呼び、その後callbackを呼ぶ
		function getToken() {
			gapi.auth.authorize({client_id: client_id, scope: scope, immediate: false, response_type: 'token'}, callback)
		}

		// ユーザー端末を得た後、getStepsを呼ぶ
		function callback(e) {
			fetch('https://www.googleapis.com/fitness/v1/users/me/dataSources?access_token=' + e.access_token)
				
			.then(response => {					
				return response.json()
			})
				
			.then(json => {
				console.log("この中に端末が入っている")
				console.log(json)
				getSteps(e.access_token, json)
			})

		}

		// ユーザー距離を得る & distancesにPOSTする & drow_user_polyline
		function getSteps(access_token, responsejson) {
			const start = new Date('2000/1/1 0:00:00').getTime()
			// console.log("startの時間")
			// console.log(start)
			// const end = new Date('2022/2/22 0:00:00').getTime()
			const end = new Date().getTime()
			// console.log("endの時間")
			// console.log(end)

				
			// Fit APIからデータを出すfetch
			console.log("Fit APIからデータを出すfetch")
			console.log(responsejson)
			// console.log(Object.keys(responsejson))
			// console.log(Object.keys(responsejson.dataSource))
			responsejson.dataSource.forEach(element => {
				console.log("取得端末名")
				console.log(element.dataStreamId)
				console.log(Object.prototype.toString.call(element.dataStreamId.substr(0,3)))
				console.log(element.dataStreamId.substr(0,3))



				//////////////////////端末名（element.dataStreamId）が"raw"から始まるものだけfetchを実行する

				if (element.dataStreamId.substr(0,3) == 'raw'){

					// console.log(responsejson.dataSource.length)
					// console.log(Object.keys(responsejson.dataSource[0]))

					data ='https://www.googleapis.com/fitness/v1/users/me/dataSources/' + element.dataStreamId + '/datasets/'
					console.log(data+start.toString()+'000000'+'-'+end.toString()+'000000?access_token=' + access_token)
					// fetchして距離を取得
					fetch(data+start.toString()+'000000'+'-'+end.toString()+'000000?access_token=' + access_token)

					.then(response => {
						return response.json()
					})

					.then(json => {
						var len = 0  //debug

						json.point.forEach(dis => {

							len += dis.value[0].fpVal  //debug
							total += dis.value[0].fpVal
						
						})

						console.log("FitAPIから取り出した、ユーザーが歩いた距離は")
						console.log(len)  //debug

					})
				
				}

			});


			



			///////////////////// fetchの中にdirectionServiceの関数 /////////////////////

			var directionsService = new google.maps.DirectionsService(); 
			var directionsRenderer = new google.maps.DirectionsRenderer();
			directionsRenderer.setMap(imap); 
			//リクエストの出発点の位置（Empire State Building 出発地点の緯度経度）
			var start_p = new google.maps.LatLng(45.397691,141.699845);  
			//リクエストの終着点の位置（Grand Central Station 到着地点の緯度経度）
			var end_p = new google.maps.LatLng( 41.8597732,140.7994969);  
			var request = {
				origin: start_p,      // 出発地点の緯度経度
				destination: end_p,   // 到着地点の緯度経度
				travelMode: 'DRIVING' //トラベルモード（歩き）
			}; 

			//fetch('https://www.googleapis.com/fitness/v1/users/me/dataSources/derived:com.google.distance.delta:com.google.android.gms:merge_distance_delta/datasets/'+start.toString()+'000000'+'-'+end.toString()+'000000?access_token=' + access_token)
			new Promise((resolve, reject) => {
  			console.log("Promise");
  			resolve();
			})

			.then(() => {

				console.log("FitAPIから取り出した、ユーザーが歩いた距離は2")
				console.log(total)


				///////////////////// directionServiceの関数 /////////////////////

				directionsService.route(request, function(result, status) {
					// ステータスがOKの場合、
					
					if (status === 'OK') {
										
						let i = 0
						const route_data = []
						
						
						
						// JSONの触り方
						result.routes[0].legs[0].steps.forEach(element => {
							route_data[i]=[element.distance.value,element.polyline.points]
							i += 1
						});
						console.log("ルートデータは");
						console.log(route_data);
						console.log("ルートデータの配列長さは")
						console.log(route_data.length);
						let count_root = 0
						let encoded_list = []


						// ##########################################################モックプレゼン用


						// total = 105678  //100km
						// total = 300000
						total = 500000




						//ユーザー距離＜ルートの距離になるまで、配列にencodedされた文字列を格納
						//&& route_dataの配列数を超えても終了(どちらか片方でもfalseなら終了)
						while (root_dis < total && route_data.length > count_root) {
							root_dis = root_dis + route_data[count_root][0]
							encoded_list[count_root] = route_data[count_root][1]
							count_root += 1

						}

						encoded_list.forEach( element =>{
							var time_count = 1
							var decoded_list = get_decoded_polyline(element)
							const onePath = new google.maps.Polyline({
								path: decoded_list,
								geodesic: true,
								strokeColor: "#0000FF",
								strokeOpacity: 0.7,
								strokeWeight: 8,
							});
							onePath.setMap(imap);

												
						})

					}else{
						alert("取得できませんでした：" + status);
					}

				});

			})









		}



		//これはひとつの文字列に対してデコードを実行する。座標を返す
		function get_decoded_polyline(encoded){
			var count = 0
			var poly_latlng = []
			//encoded_aをdecodePolylineすると、座標リストになるので、それをpoly_latlngに格納
			decodePolyline(encoded).forEach(element => {
				element.lat = element.latitude
				element.lng = element.longitude
				delete element.latitude;
				delete element.longitude;
				poly_latlng[count] = element
				count += 1
			});
			return poly_latlng
		}

		function decodePolyline(encoded) {
			if (!encoded) {
				return [];
			}
			var poly = [];
			var index = 0, len = encoded.length;
			var lat = 0, lng = 0;

			while (index < len) {
				var b, shift = 0, result = 0;

				do {
					b = encoded.charCodeAt(index++) - 63;
					result = result | ((b & 0x1f) << shift);
					shift += 5;
				} while (b >= 0x20);

				var dlat = (result & 1) != 0 ? ~(result >> 1) : (result >> 1);
				lat += dlat;

				shift = 0;
				result = 0;

				do {
					b = encoded.charCodeAt(index++) - 63;
					result = result | ((b & 0x1f) << shift);
					shift += 5;
				} while (b >= 0x20);

				var dlng = (result & 1) != 0 ? ~(result >> 1) : (result >> 1);
				lng += dlng;

				var p = {
					latitude: lat / 1e5,
					longitude: lng / 1e5,
				};
				poly.push(p);
			}

			return poly;
		}




		const post_data = {
			//DBに送るデータの骨子
			w_day: "2022-04-04",
			w_dis: 4444.44,
			distance: "sasasa"
		}; 


		// fetch('/distances', {
		//     method: 'POST',
		//     credentials: 'same-origin',
		//     headers: {
		//             'Content-Type': 'application/json',
		//             'X-CSRF-Token': getCsrfToken()
		//     },
		//     body : JSON.stringify(post_data),
		// })
		// .then(function(response){
		//     const response_message = response.status + ':' + response.statusText
		//     // console.log(response_message); // 200:OK
		//     console.log("299/distancesにPOST完了")
		// });



		window.onload = getToken
	</script>



</body>
</html>