<!doctype html>
<html lang="ja">
<head>
	<%= csrf_meta_tags %>
	<title>chizu-aruko.com</title>

	<!-- 「stylesheet.css」を読み込む -->
	<%= stylesheet_link_tag    "map", media: "all" %>

	<style type="text/css">
		v\:* {behavior:url(#default#VML);}
		html, body {width: 100%; height: 100%}
		body {margin-top: 0px; margin-right: 0px; margin-left: 0px; margin-bottom: 0px}
	</style>

	<script src="https://apis.google.com/js/client.js"></script>

	<div id="gmap" class="gmap" style="width: 100%; height: 100%;"></div>

	<script src="https://www.gstatic.com/external_hosted/jquery2.min.js"></script>

	<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['API_KEY']%>&callback=initMap" async defer></script>

</head>
<body>

	<meta charset="UTF-8">

	<div class="mappanel-wrapper">
		<div class="container">
			<div class="heading">
				<%# <h2>Mappanel</h2> %>
			</div>
			<div class="mappanels">

				<div class="mappanel">
						<%= image_tag 'zoom_in.png', id: 'zoom_in' %>
						<p>拡大</p>
					</div>
					<p class="panel-contents"></p>
				</div>

				<div class="mappanel">
					<div class="mappanel-icon" id="zoom_out">
						<%= image_tag 'zoom_out.png', id: 'zoom_out' %>
						<p>縮小</p>
					</div>
					<p class="panel-contents"></p>
				</div>

				<%# <div class="mappanel">
					<div class="mappanel-icon">
						<img src="https://prog-8.com/images/html/advanced/html.png">
						<p>ルート</p>
					</div>
					<p class="panel-contents"></p>
				</div>
				<div class="mappanel">					
					<a href="http://localhost:3000/user"> %>
					<%# <a href="https://chizu-aruko.com/user"> %>
						<%# <div class="mappanel-icon">
							<img src="https://prog-8.com/images/html/advanced/html.png">
							<p>ユーザーページへ</p>
						</div>
						<p class="panel-contents"></p>
					</a>
				</div>
				<div class="mappanel">
					<div class="mappanel-icon">
						<img src="https://prog-8.com/images/html/advanced/html.png">
						<p>閉じる</p>
					</div>
					<p class="panel-contents"></p>
				</div> %>
			
			</div>
		</div>
	</div>


	<script>

		//initMap
		function initMap() { 

			// 地図を生成して表示
			var map = new google.maps.Map(document.getElementById("gmap"), {
				mapId: "67ef94185bd51ea8",
				zoom: 7,
				center: new google.maps.LatLng(43.6850804,142.7975314),  //Madison Av/E 38 St
				mapTypeId: "roadmap",
				mapTypeControl: false,
				zoomControl: false,
				fullscreenControl: false,
				rotateControl: false,
				scaleControl: false,
				streetViewControl: false
			});

			imap = map
		}


		document.getElementById("zoom_in").onclick = function() {
			var buttonUI = document.getElementById("zoom_in");
			var zoom = imap.getZoom();
			console.log(zoom); 
			imap.setZoom(zoom + 1);
		}

		document.getElementById("zoom_out").onclick = function() {
			var buttonUI = document.getElementById("zoom_out");
			var zoom = imap.getZoom();
			console.log(zoom); 
			imap.setZoom(zoom - 1);
		}


		const client_id = '<%= ENV['APLI_CLIANT_ID']%>'
		const scope = ['https://www.googleapis.com/auth/fitness.location.read']
		let total = 0
		let route_dis = 0
		var imap



		// 細分化対象
		// Googleからユーザー距離を得る & distancesにPOSTする & drow_user_polyline
		function get_user_distances(access_token, responsejson) {
			const start = new Date('2000/1/1 0:00:00').getTime()
			const end = new Date().getTime()
			// Fit APIからデータを出すfetch
			console.log("Fit APIからデータを出すfetch")
			console.log(responsejson)
			// console.log(Object.keys(responsejson))
			// console.log(Object.keys(responsejson.dataSource))

			function get_user_distance(responsejson){
				var len = 0
				console.log("レスポンスJSON")
				console.log(responsejson)
				responsejson.dataSource.forEach(element => {
					
					if (element.dataStreamId.substr(0,3) == 'raw'){
						// 端末はrawとコピーしたものがある
						data ='https://www.googleapis.com/fitness/v1/users/me/dataSources/' + element.dataStreamId + '/datasets/'
						fetch(data+start.toString()+'000000'+'-'+end.toString()+'000000?access_token=' + access_token)
						.then(response => {return response.json()})
						.then(json => {
							json.point.forEach(dis => {
								len += dis.value[0].fpVal  //debug
								//total += dis.value[0].fpVal
							})

							console.log("FitAPIから取り出した、ユーザーが歩いた距離lenは")
							console.log(len)  //debug
							console.log("lenは")// きちんと値は返せている。しかし間に合わない故に代入ができない。
							console.log(len)
							return len
						})
					}
				});
			}
			length = get_user_distance(responsejson)
			console.log("lengthは")
			console.log(length)


			// function getSteps内

			///////////////////// fetchの中にdirectionServiceの関数 /////////////////////

			var directionsService = new google.maps.DirectionsService(); 
			var directionsRenderer = new google.maps.DirectionsRenderer();
			directionsRenderer.setMap(imap); 

			//////////////////////////////////////////////////////


      //リクエストの出発点の位置（Empire State Building 出発地点の緯度経度）
      var start_p = new google.maps.LatLng(45.4495185,141.6429939);  //ノシャップ岬
      //リクエストの終着点の位置（Grand Central Station 到着地点の緯度経度）
      var end_p = new google.maps.LatLng( 41.8075847,140.7083494);  //函館ターミナル

      var request = {
        origin: start_p,      // 出発地点の緯度経度
        destination: end_p,   // 到着地点の緯度経度
        travelMode: 'DRIVING', //トラベルモード（歩き）
        // avoidHighways: true
      }; 



			//////////////////////////////////////////////////////


			// 
			new Promise((resolve, reject) => {
  			console.log("Promise");
  			resolve();
			})

			.then(() => {
				console.log("FitAPIから取り出した、ユーザーが歩いた距離は2")
				console.log(total) //まだ返ってきていない
			})

				///////////////////// 経路登録用・directionServiceの関数 /////////////////////
			.then(() => {
				directionsService.route(request, function(result, status) {

					// ステータスがOKの場合、
					if (status === 'OK') {
										
						let i = 0
						const route_data = []
						
						// JSONの触り方
						result.routes[0].legs[0].steps.forEach(element => {
							route_data[i]=[element.distance.value,element.polyline.points]
							i += 1

						});

						console.log("ルートデータは");
						console.log(route_data);
						console.log("ルートデータの配列長さは")
						console.log(route_data.length);
						// let count_route = 0

						const post_data = {
							//DBに送るデータの骨子
							distance: route_data
						}; 


						fetch('/steps', {							
						  method: 'POST',
						  credentials: 'same-origin',
					    headers: {
				        'Content-Type': 'application/json',
					      'X-CSRF-Token': getCsrfToken()
						  },
						  body : JSON.stringify(post_data),
						})
						.then(function(response){
						  const response_message = response.status + ':' + response.statusText
						  // console.log(response_message); // 200:OK
						  console.log("299/stepsにPOST完了")
						});



						let encoded_reached_list = []
						let encoded_unreached_list = []


						// ##########################################################モックプレゼン用
						// total = 105678  //100km
						// total = 300000
						total = 500000
						//total = 1500000
						//totalをどう取ってくる？


						//ルート距離＜ユーザーの距離になるまで
						//reached_listにencodedされた文字列を格納
						//残りをunreached_listに格納
						for (let count_route = 0; count_route < route_data.length; count_route++) {
  						route_dis = route_dis + route_data[count_route][0]
							if (route_dis < total) {
								encoded_reached_list.push(route_data[count_route][1])
							}else{
    						encoded_unreached_list.push(route_data[count_route][1])
							}
						}


						draw_polylines(imap, encoded_reached_list, "#0000FF", 0.7, 8)
						draw_polylines(imap, encoded_unreached_list, "#000000", 0.4, 4)


			

					}else{
						alert("取得できませんでした：" + status);
					} //END if

				}); //END directionsService.route

			}) //END .then

			// 	///////////////////// 経路登録用・directionServiceの関数 /////////////////////			


			// 	///////////////////// 経路表示用 /////////////////////	

			.then(() => {

				fetch('/steps.json', {method: 'GET',credentials: 'same-origin'})
				.then(response => response.json())
				.then(json => {
					json.forEach(dis => {						
						// console.log(dis)
					})
					// console.log("json返ってきたか？")
				})
			})
			// 	///////////////////// 経路表示用 /////////////////////

		} //END function get_user_distances


		// DBにPOSTするfetch用にCsrfTokenを取る
		const getCsrfToken = () => {
			const metas = document.getElementsByTagName('meta');
			for (let meta of metas) {
				if (meta.getAttribute('name') === 'csrf-token') {
					return meta.getAttribute('content');
				}
			}
			return '';
		}

		// authを呼び、その後callbackを呼ぶ
		function getToken() {
			gapi.auth.authorize({client_id: client_id, scope: scope, immediate: false, response_type: 'token'}, callback)
		}

		// ユーザー端末を得た後、getStepsを呼ぶ
		function callback(e) {
			fetch('https://www.googleapis.com/fitness/v1/users/me/dataSources?access_token=' + e.access_token)
			.then(response => {return response.json()})
			.then(json => {get_user_distances(e.access_token, json)}) //端末取得
		}  // function get_user_distances(access_token, responsejson) {


		function draw_polylines(imap, list, color, opacity, stroke_weight){
			list.forEach( element =>{
				var time_count = 1
				var decoded_list = get_decoded_polyline(element)
				const onePath = new google.maps.Polyline({
					path: decoded_list,
					geodesic: true,
					strokeColor: color,
					strokeOpacity: opacity,
					strokeWeight: stroke_weight,
				});
				onePath.setMap(imap);
			})
		}

		//これはひとつの文字列に対してデコードを実行する。座標を返す
		function get_decoded_polyline(encoded){
			var count = 0
			var poly_latlng = []
			//encoded_aをdecodePolylineすると、座標リストになるので、それをpoly_latlngに格納
			decodePolyline(encoded).forEach(element => {
				element.lat = element.latitude
				element.lng = element.longitude
				delete element.latitude;
				delete element.longitude;
				poly_latlng[count] = element
				count += 1
			});
			return poly_latlng
		}


		function decodePolyline(encoded) {
			if (!encoded) {return [];}
			var poly = [];
			var index = 0, len = encoded.length;
			var lat = 0, lng = 0;

			while (index < len) {
				var b, shift = 0, result = 0;
				do {
					b = encoded.charCodeAt(index++) - 63;
					result = result | ((b & 0x1f) << shift);
					shift += 5;
				} while (b >= 0x20);

				var dlat = (result & 1) != 0 ? ~(result >> 1) : (result >> 1);
				lat += dlat;
				shift = 0;
				result = 0;

				do {
					b = encoded.charCodeAt(index++) - 63;
					result = result | ((b & 0x1f) << shift);
					shift += 5;
				} while (b >= 0x20);

				var dlng = (result & 1) != 0 ? ~(result >> 1) : (result >> 1);
				lng += dlng;
				var p = {
					latitude: lat / 1e5,
					longitude: lng / 1e5,
				};
				poly.push(p);
			}

			return poly;
		}


		window.onload = getToken
	</script>
	<input type="button" value="Exec" onclick="getToken();"/>


</body>
</html>